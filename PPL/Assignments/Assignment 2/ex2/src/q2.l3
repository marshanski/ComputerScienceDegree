(define take
  (lambda (lst pos)
    (if (or (empty? lst) (< pos 1))
      '()
      (cons (car lst) (take (cdr lst) (- pos 1))))
  )
)  

(define take-map
  (lambda (lst func pos)
    (if (or (empty? lst) (< pos 1))
        '()
        (cons (func (car lst)) (take-map (cdr lst) func (- pos 1 ))))))


(define take-filter
  (lambda (lst pred pos)
    (if (or (empty? lst) (< pos 1))
    '()
    (if(pred(car lst))
      (cons(car lst)(take-filter(cdr lst) pred (- pos 1)))
      (take-filter(cdr lst) pred pos )))
  )
 )


(define sub-size
  (lambda (lst size)
    (if (< (length lst) size)
      '()
      (if(or (empty? lst)(= size 0))
          '(())
          (cons (take lst size)(sub-size (cdr lst) size))
      )
    )
  )
)

(define sub-size-map
  (lambda (lst func size)
    (if (< (length lst) size)
      '()
      (if(or (empty? lst)(= size 0))
          '(())
          (cons (take-map lst func size) (sub-size-map (cdr lst) func size ))
      )
    )
  )
)



(define root
  (lambda (tree)
    (if (empty? tree)
      '()
      (car tree)
    )
  )
 )

(define left
  (lambda (tree)
    (if (empty? tree)
      '()
      (root(cdr tree))
    )
  )
 )

(define right
  (lambda (tree)
    (if (empty? tree)
      '()
      (root(cdr(cdr tree)))
    )
  )
 )


(define count-node
  (lambda (tree val)
    (if (empty? tree)
        0
        (if (pair? tree)
            (if (eq? (root tree) val)
                (+ 1 (+ (count-node (left tree) val) (count-node (right tree) val)))
                (+ 0 (+ (count-node (left tree) val) (count-node (right tree) val))))
            (if (eq? tree val)
                1
                0
            )
        )
      )
    )
  )


(define mirror-tree
  (lambda (tree)
  (if (empty? tree)
    '()
    (if (pair? tree)
    (cons (root tree)
    (cons (mirror-tree(right tree)) 
    (cons (mirror-tree(left tree))'() )))

    tree)
    )
  ) 
)


(define make-ok
  (lambda (val)
    (cons 'ok val)
  )
 )
 

(define make-error
  (lambda (msg)
    (cons 'error msg)
  )
 )

(define ok?
  (lambda (res)
    (if(pair? res)
    (eq? (car res) 'ok)
    #f
    )
 )
)

(define error?
  (lambda (res)
    (if(pair? res)
    (eq? (car res) 'error)
    #f
    )
 )
)

(define result?
  (lambda (res)
    (or (ok? res) (error? res))
  )
 )

(define result->val
  (lambda (res)
    (if (result? res) 
      (cdr res) 
      (make-error "Error: not a result")
    )
  )
)

(define bind 
  (lambda (f)
    (lambda (res)
      (if (result? res)
          (if (ok? res) 
              (f (result->val res))
              res
          )
          (make-error "some error message")
      )
    )
  )
)
